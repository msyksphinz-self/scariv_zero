GShare分岐予測器
==============

GShare分岐予測器は、グローバル分岐予測機の一種であり、現在のPCアドレスのみでなく全体的な分岐命令の結果列を使用して分岐予測を行います。

例えば以下のような命令列を考えます (以下は「コンピュータアーキテクチャ 定量的アプローチ 第5版」を引用した上でRISC-Vアーキテクチャに修正したものです)。

- C言語での実装

	if (aa & 1) {
	   aa = 0;
	   } else {
   aa = 1;
}
if (bb & 1) {
   bb = 0;
} else {
   bb = 1;
}
if (aa != bb) {
...
}


上記をコンパイルして生成したアセンブリコードが以下になります。

```asm
branch_count:
    li      t0, 5
    blt     a0, t0, .cut_aa
	li		a0, 0
    j       .bb_check
.cut_aa:
    li		a0, 1

.bb_check:
    blt     a1, t0, .cut_bb
	li		a1, 0
    j       .final_check
.cut_bb:
    li		a1, 1

.final_check:
    bne     a0, a1, .ret_false
    li      a0, 1
.ret_false:
    li      a0, 0
    ret
```

BNE命令によるaaとbbの比較は、それより前の2つの分岐命令`BLT`に依存します。2つのBLT命令の結果、分岐成立を1、分岐不成立を0とし、ビット列で表現すると、

```
00_0   // aa < 5成立, bb < 5成立 --> aa!=bb不成立
01_1   // aa < 5成立, bb < 5不成立 --> aa!=bb成立
10_1   // aa < 5不成立, bb < 5成立 --> aa!=bb成立
11_0   // aa < 5不成立, bb < 5不成立 --> aa!=bb不成立
```

このように、前の2つ分の分岐結果により最後の分岐命令の結果を予測することが出来ます。
分岐結果を管理するビット列をBHR(Branch History Table)と呼び、分岐予測はBHRとPCとのハッシュ関数(実装はXOR)によるインデックスを作成し、そのインデックスに基づいて
2ビット予測カウンタに対してアクセスを行います。

