# Random Assembly Program Generated using aapg
# Generated at: 2022-03-11 16:13 GMT
# Seed: 13863580155342831244

#include "templates.S"

#aapg version: 2.2.6

# Generated by user: Unknown
# Arguments:
#  priv-mode:
#    mode: m
#  general:
#    total_instructions: 10000
#    regs_not_use: x1,x2
#    custom_trap_handler: True
#    code_start_address: 2147483648
#    default_program_exit: True
#    delegation: 4095
#  isa-instruction-distribution:
#    rel_sys: 0
#    rel_sys.csr: 0
#    rel_rv32i.ctrl: 1
#    rel_rv32i.compute: 10
#    rel_rv32i.data: 10
#    rel_rv32i.fence: 10
#    rel_rv64i.compute: 10
#    rel_rv64i.data: 10
#    rel_rv32m: 5
#    rel_rv64m: 5
#    rel_rv32a: 0
#    rel_rv64a: 0
#    rel_rv32f: 0
#    rel_rv64f: 0
#    rel_rv32d: 0
#    rel_rv64d: 0
#    rel_rvc.ctrl: 1
#    rel_rvc.compute: 10
#    rel_rvc.sp: 10
#    rel_rvc.data: 10
#    rel_rvc.fdata: 0
#    rel_rv32c.compute: 10
#    rel_rv32c.ctrl: 1
#    rel_rv32c.fdata: 0
#    rel_rv64c.compute: 10
#    rel_rv64c.data: 10
#  float-rounding:
#    rne: 0
#    rtz: 0
#    rdn: 0
#    rup: 0
#    rmm: 0
#  branch-control:
#    backward-probability: 0.5
#    block-size: 7
#  recursion-options:
#    recursion-enable: False
#    recursion-depth: 10
#    recursion-calls: 5
#  access-sections:
#    begin_signature: 0x80091000,0x80095000,rw
#  csr-sections:
#    sections: 0x0100:0xdff, 0x325, 0x500:0xfff
#  user-functions:
#    func1: {0:"add x0,x0,x0"}
#  switch-priv-modes:
#    switch_modes: False
#    num_switches: 0
#  i-cache:
#    num_calls: 0
#    num_bytes_per_block: 16
#    num_blocks: 8
#    num_cycles: 10
#  d-cache:
#    num_calls: 0
#    num_bytes_per_block: 16
#    num_blocks: 8
#    num_cycles: 10
#  exception-generation:
#    ecause00: 0
#    ecause01: 0
#    ecause02: 0
#    ecause03: 0
#    ecause04: 0
#    ecause05: 0
#    ecause06: 0
#    ecause07: 0
#    ecause08: 0
#    ecause09: 0
#    ecause10: 0
#    ecause11: 0
#    ecause12: 0
#    ecause13: 0
#    ecause14: 0
#  data-hazards:
#    raw_prob: 0.5
#    war_prob: 0.5
#    waw_prob: 0.5
#    num_regs_lookbehind: 3
#  program-macro:
#    pre_program_macro: add x0,x0,x0
#    post_program_macro: add x0,x0,x0
#    pre_branch_macro: add x0,x0,x0
#    post_branch_macro: add x0,x0,x0
#    ecause00: random
#    ecause01: random
#    ecause02: random
#    ecause03: random
#    ecause04: random
#    ecause05: random
#    ecause06: random
#    ecause07: random
#    ecause08: random
#    ecause09: random
#    ecause10: random
#    ecause11: random
#    ecause12: random
#    ecause13: random
#    ecause14: random
#  self-checking:
#    rate: 100
#    test_pass_macro: la      sp, begin_signature; addi    sp, sp, 2*REGBYTES; li      t1, 0xfffff; SREG    t1, 0*REGBYTES(sp)
#    test_fail_macro: add x0,x0,x0

	.text
	.align		4
	.globl		main
	.type		main, @function
main:
				pre_program_macro             
				la                  t0, custom_trap_handler
				csrw                mtvec, t0 
				test_entry_macro              
				123:                          
				la                  sp, begin_signature
				li                  t1, 10448 
				add                 sp, sp, t1
i0000000000:	li                  x29, 10   
i0000000001:	srai                a5, a5, 8 
i0000000002:	addi                sp, sp, -128
i0000000003:	mulhu               t3, t5, t1
				la                  sp, begin_signature
				li                  t1, 12544 
				add                 sp, sp, t1
i0000000004:	lb                  s8, 503(sp)         
i0000000005:	addw                a4, a4, a2
i0000000006:	ld                  a3, 112(sp)         
i0000000007:	addiw               a1, a1, -1
i0000000008:	sub                 t6, s5, s11
i0000000009:	ld                  s3, 88(sp)          
i000000000a:	lui                 s0, 185424
i000000000b:	lb                  a2, -1224(sp)       
i000000000c:	add                 t0, s5, s4
i000000000d:	sub                 a4, a4, a0
i000000000e:	fence.i                       
i000000000f:	sd                  a1, 80(sp)          
i0000000010:	xori                a4, a2, 94
i0000000011:	andi                a3, a3, 15
i0000000012:	fence.i                       
i0000000013:	lwu                 a1, -1812(sp)       
i0000000014:	srli                a4, a4, 14
i0000000015:	srl                 a4, t0, s8
i0000000016:	sraiw               s10, a1, 16
				la                  sp, begin_signature
				li                  t1, 4312  
				add                 sp, sp, t1
i0000000017:	sw                  a4, 44(sp)          
i0000000018:	remuw               t6, a4, a1
i0000000019:	subw                a5, a4, a4
i000000001a:	xor                 a2, a2, a0
i000000001b:	ld                  a4, 560(sp)         
i000000001c:	or                  a2, a2, a0
i000000001d:	and                 a2, a2, a5
i000000001e:	addiw               a5, a2, -1395
i000000001f:	sllw                a4, a7, s6
i0000000020:	lwu                 tp, -2012(sp)       
i0000000021:	rem                 t6, a2, a5
i0000000022:	divu                a4, s10, a1
i0000000023:	fence.i                       
i0000000024:	divw                a4, t6, a4
i0000000025:	sw                  a4, 28(sp)          
i0000000026:	ld                  a2, 240(sp)         
i0000000027:	srlw                s0, t2, s2
i0000000028:	fence.i                       
				li                  x22, 9    
				li                  x29, 10   
				sd                  a5, 256(sp)         
				lw                  s3, 1832(sp)        
				addi                sp, sp, 224
				add                 s5, s5, s9
				srlw                t2, zero, s9
				addw                s1, s1, a5
				lw                  a5, 20(sp)          
	
b0000000029:
				pre_branch_macro                        
				bge                 x22, x29, i0000000037
				post_branch_macro                       
	
				srli                a4, a4, 1 
				lhu                 a4, -268(sp)        
				mulhsu              s4, t2, a7
				addi                s1, sp, 168
				mulw                a5, a4, a5
				lb                  a4, -517(sp)        
				addiw               a5, t6, 811
				li                  x29, 10   
i0000000029:	addi                a3, sp, 100
i000000002a:	srli                a1, a1, 1 
i000000002b:	sltu                a1, s8, s7
i000000002c:	andi                a2, a2, 7 
i000000002d:	add                 a2, a4, a1
i000000002e:	addi                s1, sp, 132
i000000002f:	sw                  a1, 108(sp)         
i0000000030:	srai                a5, a5, 4 
i0000000031:	fence                         
i0000000032:	addiw               a1, a1, -28
				la                  sp, begin_signature
				li                  t1, 14240 
				add                 sp, sp, t1
i0000000033:	lh                  a0, 306(sp)         
i0000000034:	srlw                gp, a5, a0
i0000000035:	fence                         
i0000000036:	fence.i                       
i0000000037:	fence                         
i0000000038:	andi                a2, a2, -30
i0000000039:	fence.i                       
i000000003a:	addi                s1, sp, 288
i000000003b:	lw                  a4, 56(sp)          
i000000003c:	subw                a4, a4, a1
i000000003d:	srl                 a4, a1, a2
i000000003e:	srlw                a1, a1, a2
i000000003f:	xori                a2, a2, -1656
i0000000040:	sw                  a2, 56(sp)          
i0000000041:	addiw               a0, a0, -31
i0000000042:	srli                a6, s11, 14
i0000000043:	sd                  t1, -536(sp)        
i0000000044:	fence.i                       
i0000000045:	and                 a1, a1, s0
i0000000046:	addw                a2, a1, a1
i0000000047:	addi                a1, sp, 4 
				la                  sp, begin_signature
				li                  t1, 4688  
				add                 sp, sp, t1
i0000000048:	lwu                 t1, -724(sp)        
i0000000049:	sllw                s0, s9, s8
				la                  sp, begin_signature
				li                  t1, 13368 
				add                 sp, sp, t1
i000000004a:	ld                  s1, -328(sp)        
i000000004b:	addi                sp, sp, 16
i000000004c:	lbu                 a1, -55(sp)         
i000000004d:	add                 a2, zero, a2
i000000004e:	addiw               a4, a4, -20
i000000004f:	xor                 a5, a5, a1
i0000000050:	and                 s1, s1, s0
				li                  x20, 12   
				addi                x29, x29, 1
				mul                 a5, t2, gp
				fence.i                       
				addiw               a5, s2, -665
				addiw               a7, t2, 400
				remu                t2, s1, a4
				mulh                t2, s1, s1
				fence.i                       
	
b0000000051:
				beq                 x29, x20, 1f        
				jal                 x1, i0000000033     
				1: li x29, 10                           
	
				lhu                 s1, 170(sp)         
				mulh                s11, a5, s1
				srliw               t3, a4, 23
				ld                  zero, -1560(sp)     
				addi                s0, sp, 260
				sd                  a5, 16(sp)          
				srai                a5, a5, 7 
i0000000051:	add                 s5, s5, a4
