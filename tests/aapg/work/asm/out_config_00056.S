# Random Assembly Program Generated using aapg
# Generated at: 2022-03-11 16:13 GMT
# Seed: 13863580155342831251

#include "templates.S"

#aapg version: 2.2.6

# Generated by user: Unknown
# Arguments:
#  priv-mode:
#    mode: m
#  general:
#    total_instructions: 10000
#    regs_not_use: x1,x2
#    custom_trap_handler: True
#    code_start_address: 2147483648
#    default_program_exit: True
#    delegation: 4095
#  isa-instruction-distribution:
#    rel_sys: 0
#    rel_sys.csr: 0
#    rel_rv32i.ctrl: 1
#    rel_rv32i.compute: 10
#    rel_rv32i.data: 10
#    rel_rv32i.fence: 10
#    rel_rv64i.compute: 10
#    rel_rv64i.data: 10
#    rel_rv32m: 5
#    rel_rv64m: 5
#    rel_rv32a: 0
#    rel_rv64a: 0
#    rel_rv32f: 0
#    rel_rv64f: 0
#    rel_rv32d: 0
#    rel_rv64d: 0
#    rel_rvc.ctrl: 1
#    rel_rvc.compute: 10
#    rel_rvc.sp: 10
#    rel_rvc.data: 10
#    rel_rvc.fdata: 0
#    rel_rv32c.compute: 10
#    rel_rv32c.ctrl: 1
#    rel_rv32c.fdata: 0
#    rel_rv64c.compute: 10
#    rel_rv64c.data: 10
#  float-rounding:
#    rne: 0
#    rtz: 0
#    rdn: 0
#    rup: 0
#    rmm: 0
#  branch-control:
#    backward-probability: 0.5
#    block-size: 7
#  recursion-options:
#    recursion-enable: False
#    recursion-depth: 10
#    recursion-calls: 5
#  access-sections:
#    begin_signature: 0x80091000,0x80095000,rw
#  csr-sections:
#    sections: 0x0100:0xdff, 0x325, 0x500:0xfff
#  user-functions:
#    func1: {0:"add x0,x0,x0"}
#  switch-priv-modes:
#    switch_modes: False
#    num_switches: 0
#  i-cache:
#    num_calls: 0
#    num_bytes_per_block: 16
#    num_blocks: 8
#    num_cycles: 10
#  d-cache:
#    num_calls: 0
#    num_bytes_per_block: 16
#    num_blocks: 8
#    num_cycles: 10
#  exception-generation:
#    ecause00: 0
#    ecause01: 0
#    ecause02: 0
#    ecause03: 0
#    ecause04: 0
#    ecause05: 0
#    ecause06: 0
#    ecause07: 0
#    ecause08: 0
#    ecause09: 0
#    ecause10: 0
#    ecause11: 0
#    ecause12: 0
#    ecause13: 0
#    ecause14: 0
#  data-hazards:
#    raw_prob: 0.5
#    war_prob: 0.5
#    waw_prob: 0.5
#    num_regs_lookbehind: 3
#  program-macro:
#    pre_program_macro: add x0,x0,x0
#    post_program_macro: add x0,x0,x0
#    pre_branch_macro: add x0,x0,x0
#    post_branch_macro: add x0,x0,x0
#    ecause00: random
#    ecause01: random
#    ecause02: random
#    ecause03: random
#    ecause04: random
#    ecause05: random
#    ecause06: random
#    ecause07: random
#    ecause08: random
#    ecause09: random
#    ecause10: random
#    ecause11: random
#    ecause12: random
#    ecause13: random
#    ecause14: random
#  self-checking:
#    rate: 100
#    test_pass_macro: la      sp, begin_signature; addi    sp, sp, 2*REGBYTES; li      t1, 0xfffff; SREG    t1, 0*REGBYTES(sp)
#    test_fail_macro: add x0,x0,x0

	.text
	.align		4
	.globl		main
	.type		main, @function
main:
				pre_program_macro             
				la                  t0, custom_trap_handler
				csrw                mtvec, t0 
				test_entry_macro              
				123:                          
				la                  sp, begin_signature
				li                  t1, 8312  
				add                 sp, sp, t1
i0000000000:	li                  x23, 10   
i0000000001:	sraw                t1, zero, t4
i0000000002:	divuw               zero, s5, s4
i0000000003:	ld                  a5, 16(sp)          
i0000000004:	subw                zero, zero, zero
i0000000005:	srai                s0, s0, 8 
i0000000006:	slli                s0, s0, 6 
i0000000007:	srli                s0, s0, 14
				la                  sp, begin_signature
				li                  t1, 2360  
				add                 sp, sp, t1
i0000000008:	lh                  t6, 638(sp)         
i0000000009:	sraiw               s0, s5, 31
i000000000a:	addi                s0, sp, 460
i000000000b:	fence                         
i000000000c:	div                 a7, t3, a2
i000000000d:	or                  s5, t2, t3
i000000000e:	sw                  s2, -1892(sp)       
i000000000f:	divuw               t3, t3, s10
i0000000010:	srli                a3, a3, 20
i0000000011:	lui                 s0, 17    
i0000000012:	lbu                 zero, -1115(sp)     
i0000000013:	div                 s1, zero, a5
i0000000014:	remw                s0, t0, a4
i0000000015:	divu                s2, s8, t2
i0000000016:	addi                sp, sp, -336
i0000000017:	remw                zero, s2, a7
i0000000018:	xor                 a1, a1, a4
i0000000019:	andi                t0, a5, -1666
i000000001a:	addi                a4, sp, 92
i000000001b:	fence.i                       
i000000001c:	sd                  s5, -376(sp)        
i000000001d:	addiw               a3, a3, -29
i000000001e:	and                 t3, a4, s5
i000000001f:	addi                a4, sp, 340
i0000000020:	lw                  a3, 12(sp)          
i0000000021:	srai                a1, a1, 16
i0000000022:	remw                s3, s1, s9
i0000000023:	fence.i                       
